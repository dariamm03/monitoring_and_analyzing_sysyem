import time
import requests
import os
import json
import joblib
import random
import pandas as pd

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
BASE_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
SETTINGS_FILE = "/app/user_settings.json"
DEFAULT_SETTINGS = {
    "frequency": 30,
    "threshold": 0.9,
    "muted": False,
    "period": "today"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = joblib.load('/app/model.pkl')

tfidf = joblib.load('/app/tfidf.pkl')

def load_settings():
    if not os.path.exists(SETTINGS_FILE):
        return {}
    with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def send_message(chat_id, text):
    try:
        requests.post(f"{BASE_URL}/sendMessage", data={"chat_id": chat_id, "text": text})
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def get_user_settings(chat_id, settings_data):
    return settings_data.get(chat_id, DEFAULT_SETTINGS)

def predict_log_message(message_text):
    """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ª–æ–≥–∞"""
    try:
        X = tfidf.transform([message_text])
        proba = model.predict_proba(X)[0][1]  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ "–æ—à–∏–±–∫–∞"
        return proba
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return 0

def simulate_new_log():
    """–ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    samples = [
        "Error: Unable to connect to database",
        "User successfully logged in",
        "Warning: Disk space is running low",
        "Unhandled exception in controller",
        "Scheduled job completed without issues",
    ]
    return random.choice(samples)

def main():
    while True:
        settings_data = load_settings()
        new_log = simulate_new_log()
        print(f"üìù –ù–æ–≤—ã–π –ª–æ–≥: {new_log}")

        prediction_score = predict_log_message(new_log)

        for chat_id in settings_data.keys():
            user_settings = get_user_settings(chat_id, settings_data)
            threshold = user_settings.get("threshold", DEFAULT_SETTINGS["threshold"])
            muted = user_settings.get("muted", DEFAULT_SETTINGS["muted"])

            if muted:
                continue

            if prediction_score > threshold:
                text = f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞:\n{new_log}\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prediction_score:.0%}"
                send_message(chat_id, text)

        time.sleep(5)  # 5 –º–∏–Ω—É—Ç –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏

if __name__ == "__main__":
    main()
