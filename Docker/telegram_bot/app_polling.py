import asyncio
import json
import os
import pandas as pd
import requests
from fpdf import FPDF
from lock_monitor import get_active_locks
import matplotlib.pyplot as plt
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
from notification_sender import send_notification

# –°—Ç–µ–π—Ç—ã –¥–ª—è ConversationHandler
MAIN_MENU, CHOOSING_SETTING, CHOOSING_THRESHOLD, CHOOSING_INTERVAL, CHOOSING_LOG_LEVEL, CHOOSING_LOG_WINDOW, CHOOSING_LOG_THRESHOLD, CHOOSING_LOG_INTERVAL = range(8)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
SETTINGS_DIR = "/app/settings"
LOGS_FILE = "/app/logs/logs.csv"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TEST_MODE = True
SENT_TEST = False
REPORT_MODE = "last_10"

# -------------- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------

async def send_to_predictor(log_entry):
    url = "http://ml:8000/predict"
    payload = log_entry
    response = requests.post(url, json=payload)
    return response.json()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_main_menu(update)
    return MAIN_MENU

async def show_main_menu(update: Update):
    user_id = str(update.effective_user.id)
    settings = load_user_settings(user_id)

    buttons = []

    if is_support(settings):
        buttons.extend([
            [KeyboardButton("üì´ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")],
            [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç")],
        ])
    else:
        buttons.extend([
            [KeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç")],
            [KeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ–π—á–∞—Å")],
            [KeyboardButton("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
        ])

    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)


async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":  # —Ç—É—Ç –∏—Å–ø—Ä–∞–≤–∏–ª–∏!
        await show_settings(update)
        return MAIN_MENU
    elif text == "üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        await ask_setting_choice(update)
        return CHOOSING_SETTING
    elif text == "üìã –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç":   # —Ç—É—Ç —Ç–æ–∂–µ –∏—Å–ø—Ä–∞–≤—å! üìã, –∞ –Ω–µ üìã
        await ask_report_format(update)
        return MAIN_MENU
    elif text == "üì´ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
        return await ask_log_level(update)
    elif text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ–π—á–∞—Å":
        await handle_check_locks(update)
        return MAIN_MENU
    else:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ üëÜ")
        return MAIN_MENU

def load_user_settings(user_id):
    filepath = f"{SETTINGS_DIR}/{user_id}.json"
    if os.path.exists(filepath):
        with open(filepath, "r") as f:
            return json.load(f)
    else:
        default_settings = {
            "threshold": 0.8,
            "notification_interval": 300,
            "chat_id": int(user_id),
            "role": "customer"  # –∏–ª–∏ –≤—Ä—É—á–Ω—É—é –º–µ–Ω—è–π –Ω–∞ "support" –≤ JSON-—Ñ–∞–π–ª–µ
        }
        save_user_settings(user_id, default_settings)
        return default_settings

def is_support(user_settings):
    return user_settings.get("role") == "support"

async def send_lock_report(update: Update):
    try:
        df = pd.read_csv("/app/shared/features_unlabeled.csv")
        total = len(df)
        high_risk = df[df["prob"] >= 0.8]
        top_dbs = df["db"].value_counts().head(3)
        top_types = df["query_type_encoded"].value_counts().head(3)

        text = f"üìä *–û—Ç—á–µ—Ç –ø–æ SQL-–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º:*\n\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}\n"
        text += f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {len(high_risk)}\n"
        text += "\nüß© –¢–æ–ø-3 –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:\n"
        for db, count in top_dbs.items():
            text += f"  ‚Ä¢ {db}: {count}\n"
        text += "\nüóÇÔ∏è –¢–æ–ø-3 —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        for qtype, count in top_types.items():
            text += f"  ‚Ä¢ –¢–∏–ø {qtype}: {count}\n"

        await update.message.reply_text(text, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")


async def handle_check_locks(update: Update):
    locks = get_active_locks()
    if not locks:
        await update.message.reply_text("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç.")
        return

    for lock in locks:
        msg = (
            f"üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ SQL!*\n"
            f"*–°–µ—Å—Å–∏—è:* `{lock['session_id']}`\n"
            f"*–ë–ª–æ–∫–∏—Ä—É—é—â–∞—è:* `{lock['blocking_session_id']}`\n"
            f"*–ë–î:* `{lock['db']}`\n"
            f"*–ö–æ–º–∞–Ω–¥–∞:* `{lock['command']}`\n"
            f"*–û–∂–∏–¥–∞–Ω–∏–µ:* `{lock['wait_type']} ({lock['wait_time']} –º—Å)`\n"
            f"```{lock['sql'][:500]}```"
        )
        await update.message.reply_markdown(msg)


async def ask_report_format(update: Update):
    user_id = str(update.effective_user.id)
    user_settings = load_user_settings(user_id)

    buttons = [
        [KeyboardButton("üìÉ Excel-–æ—Ç—á–µ—Ç")],
        [KeyboardButton("üìÑ PDF-–æ—Ç—á–µ—Ç")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]

    if is_support(user_settings):
        buttons.append([KeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º")])

    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞:", reply_markup=markup)

async def report_format_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìÉ Excel-–æ—Ç—á–µ—Ç":
        await send_excel_report(update, context)
    elif text == "üìÑ PDF-–æ—Ç—á–µ—Ç":
        await send_pdf_report(update, context)
    elif text == "üìä –û—Ç—á–µ—Ç –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º":
        await send_lock_report(update)
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await show_main_menu(update)

async def show_settings(update: Update):
    user_id = str(update.effective_user.id)
    settings = load_user_settings(user_id)

    text = (
        f"üìã –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –æ—à–∏–±–∫–∏ (ML): {settings.get('threshold', '?')}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (ML): {settings.get('notification_interval', '?')} —Å–µ–∫\n"
    )

    log_settings = settings.get("log_monitoring")
    if log_settings:
        text += (
            "\nü™µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {log_settings.get('level', '?')}\n"
            f"‚Ä¢ –û–∫–Ω–æ: {log_settings.get('window_minutes', '?')} –º–∏–Ω\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤—Å–ø–ª–µ—Å–∫–∞: x{log_settings.get('threshold', '?')}\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {log_settings.get('notification_interval', '?')} —Å–µ–∫\n"
        )

    await update.message.reply_text(text)


async def ask_log_level(update: Update):
    buttons = [[KeyboardButton("ERROR"), KeyboardButton("INFO"), KeyboardButton("ALL")]]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤:", reply_markup=markup)
    return CHOOSING_LOG_LEVEL

async def log_level_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    level = update.message.text.upper()
    user_id = str(update.effective_user.id)
    settings = load_user_settings(user_id)
    settings.setdefault("log_monitoring", {})
    settings["log_monitoring"]["level"] = level
    save_user_settings(user_id, settings)
    await update.message.reply_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level}")
    return await ask_log_window(update)

async def ask_log_window(update: Update):
    buttons = [[KeyboardButton("5"), KeyboardButton("15"), KeyboardButton("60")]]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –æ–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ (–≤ –º–∏–Ω—É—Ç–∞—Ö):", reply_markup=markup)
    return CHOOSING_LOG_WINDOW

async def log_window_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    window = int(update.message.text)
    user_id = str(update.effective_user.id)
    settings = load_user_settings(user_id)
    settings["log_monitoring"]["window_minutes"] = window
    save_user_settings(user_id, settings)
    await update.message.reply_text(f"‚úÖ –û–∫–Ω–æ –ª–æ–≥–æ–≤: {window} –º–∏–Ω—É—Ç")
    return await ask_log_threshold(update)

async def ask_log_threshold(update: Update):
    buttons = [[KeyboardButton("2.0"), KeyboardButton("3.0"), KeyboardButton("5.0")]]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–≥ –≤—Å–ø–ª–µ—Å–∫–∞:", reply_markup=markup)
    return CHOOSING_LOG_THRESHOLD

async def log_threshold_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    threshold = float(update.message.text)
    user_id = str(update.effective_user.id)
    settings = load_user_settings(user_id)
    settings["log_monitoring"]["threshold"] = threshold
    save_user_settings(user_id, settings)
    await update.message.reply_text(f"‚úÖ –ü–æ—Ä–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: x{threshold}")
    return await ask_log_interval(update)

async def ask_log_interval(update: Update):
    buttons = [[KeyboardButton("300"), KeyboardButton("900"), KeyboardButton("1800")]]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):", reply_markup=markup)
    return CHOOSING_LOG_INTERVAL

async def log_interval_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    interval = int(update.message.text)
    user_id = str(update.effective_user.id)
    settings = load_user_settings(user_id)
    settings["log_monitoring"]["notification_interval"] = interval
    save_user_settings(user_id, settings)
    await update.message.reply_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —Å–µ–∫—É–Ω–¥")
    await show_main_menu(update)
    return MAIN_MENU


# -------------- –û—Ç—á–µ—Ç—ã --------------

async def send_excel_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        df = pd.read_csv(LOGS_FILE, sep=';', encoding='utf-8')

        if REPORT_MODE == "last_10":
            df = df.head(10)
        elif REPORT_MODE == "day":
            df['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce')
            last_day = pd.Timestamp.now() - pd.Timedelta(days=1)
            df = df[df['Timestamp'] >= last_day]

        summary_by_category = df.groupby('Category').size().reset_index(name='Count')
        summary_by_severity = df.groupby('Severity').size().reset_index(name='Count')
        top_users = df.groupby('UserName').size().reset_index(name='Logs').sort_values('Logs', ascending=False).head(5)
        top_processes = df.groupby('ProcessName').size().reset_index(name='Logs').sort_values('Logs', ascending=False).head(5)

        if 'Timestamp' in df.columns and not df['Timestamp'].isnull().all():
            df['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce')
            df = df.dropna(subset=['Timestamp'])
            activity_by_day = df['Timestamp'].dt.date.value_counts().reset_index()
            activity_by_day.columns = ['ActivityDate', 'Logs']
            activity_by_day = activity_by_day.sort_values('ActivityDate')
        else:
            activity_by_day = pd.DataFrame(columns=['ActivityDate', 'Logs'])

        report_path = "/app/report.xlsx"
        with pd.ExcelWriter(report_path) as writer:
            df.to_excel(writer, sheet_name="–õ–æ–≥–∏", index=False)
            summary_by_category.to_excel(writer, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π", index=False)
            summary_by_severity.to_excel(writer, sheet_name="–°—Ç–µ–ø–µ–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏", index=False)
            top_users.to_excel(writer, sheet_name="–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", index=False)
            top_processes.to_excel(writer, sheet_name="–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", index=False)
            activity_by_day.to_excel(writer, sheet_name="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º", index=False)

        with open(report_path, "rb") as f:
            await update.message.reply_document(document=InputFile(f, filename="report.xlsx"))

        await update.message.reply_text("üìã Excel-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üéâ")
    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-–æ—Ç—á–µ—Ç–∞: {e}")

async def send_pdf_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        df = pd.read_csv(LOGS_FILE, sep=';', encoding='utf-8')
        df['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce')
        df = df.dropna(subset=['Timestamp'])

        top_users = df['UserName'].value_counts().head(5)
        top_processes = df['ProcessName'].value_counts().head(5)
        activity_by_day = df['Timestamp'].dt.date.value_counts().sort_index()

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        plt.figure(figsize=(10, 5))
        activity_by_day.plot(kind='line', marker='o')
        plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π')
        plt.grid(True)
        plt.tight_layout()
        graph_path = '/app/activity_graph.png'
        plt.savefig(graph_path)
        plt.close()

        pdf = FPDF()
        pdf.add_page()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –Æ–Ω–∏–∫–æ–¥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —à—Ä–∏—Ñ—Ç–∞!)
        pdf.add_font('DejaVu', '', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', uni=True)
        pdf.set_font('DejaVu', '', 16)

        pdf.cell(0, 10, '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –ª–æ–≥–∞–º', ln=True, align='C')

        pdf.ln(10)
        pdf.set_font('DejaVu', '', 12)
        pdf.cell(0, 10, '–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫:', ln=True)
        for user, count in top_users.items():
            print(f"üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
            pdf.cell(0, 10, f" - {user}: {count}", ln=True)

        pdf.ln(5)
        pdf.cell(0, 10, '–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—à–∏–±–æ–∫:', ln=True)
        for proc, count in top_processes.items():
            pdf.cell(0, 10, f" - {proc}: {count}", ln=True)

        pdf.ln(10)
        pdf.cell(0, 10, '–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º:', ln=True)
        pdf.image(graph_path, w=180)

        pdf_output = '/app/report.pdf'
        pdf.output(pdf_output)

        with open(pdf_output, "rb") as f:
            await update.message.reply_document(document=InputFile(f, filename="report.pdf"))

        await update.message.reply_text("üìÑ PDF-–æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! üéâ")

    except Exception as e:
        await update.message.reply_text(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF-–æ—Ç—á–µ—Ç–∞: {e}")


# -------------- –†–∞–±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π --------------

def save_user_settings(user_id, settings):
    os.makedirs(SETTINGS_DIR, exist_ok=True)
    with open(f"{SETTINGS_DIR}/{user_id}.json", "w") as f:
        json.dump(settings, f, indent=4)

def load_user_settings(user_id):
    filepath = f"{SETTINGS_DIR}/{user_id}.json"
    if os.path.exists(filepath):
        with open(filepath, "r") as f:
            return json.load(f)
    else:
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = {
            "threshold": 0.8,
            "notification_interval": 300,
            "chat_id": int(user_id)
        }
        save_user_settings(user_id, default_settings)
        return default_settings


# -------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å–º–µ–Ω–∞ –ø–æ—Ä–æ–≥–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤) --------------

async def ask_setting_choice(update: Update):
    buttons = [
        [KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –æ—à–∏–±–∫–∏")],
        [KeyboardButton("üïí –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å? üõ†Ô∏è", reply_markup=markup)

async def setting_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –æ—à–∏–±–∫–∏":
        buttons = [
            [KeyboardButton("0.5"), KeyboardButton("0.6")],
            [KeyboardButton("0.7"), KeyboardButton("0.8")],
            [KeyboardButton("0.9")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –æ—à–∏–±–∫–∏:", reply_markup=markup)
        return CHOOSING_THRESHOLD
    elif text == "üïí –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        buttons = [
            [KeyboardButton("60"), KeyboardButton("300")],
            [KeyboardButton("600"), KeyboardButton("1800")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ]
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):", reply_markup=markup)
        return CHOOSING_INTERVAL
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await show_main_menu(update)
        return MAIN_MENU

async def threshold_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await show_main_menu(update)
        return MAIN_MENU
    try:
        threshold = float(text)
        user_id = str(update.effective_user.id)
        settings = load_user_settings(user_id)
        settings["threshold"] = threshold
        save_user_settings(user_id, settings)
        await update.message.reply_text(f"‚úÖ –ü–æ—Ä–æ–≥ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {threshold}")
        await show_main_menu(update)
        return MAIN_MENU
    except ValueError:
        await update.message.reply_text("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–æ–∫!")
        return CHOOSING_THRESHOLD

async def interval_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await show_main_menu(update)
        return MAIN_MENU
    try:
        interval = int(text)
        user_id = str(update.effective_user.id)
        settings = load_user_settings(user_id)
        settings["notification_interval"] = interval
        save_user_settings(user_id, settings)
        await update.message.reply_text(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {interval} —Å–µ–∫")
        await show_main_menu(update)
        return MAIN_MENU
    except ValueError:
        await update.message.reply_text("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–æ–∫!")
        return CHOOSING_INTERVAL

# -------------- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π --------------
print("‚ö° –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

async def polling_loop():
    global TEST_MODE, SENT_TEST
    while True:
        if not TEST_MODE or SENT_TEST:
            await asyncio.sleep(10)
            continue

        settings_files = os.listdir(SETTINGS_DIR)
        for settings_file in settings_files:
            with open(os.path.join(SETTINGS_DIR, settings_file), 'r') as f:
                user_settings = json.load(f)
                chat_id = user_settings.get("chat_id")
                if not chat_id:
                    continue

                test_log = {
                    "text": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
                    "user": str(chat_id),
                    "process": "db_connector",
                    "level": "ERROR",
                    "timestamp": "2025-04-27 16:00:00"
                }
                prediction = await send_to_predictor(test_log)
                print(f"üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {prediction}")

                threshold = user_settings.get("threshold", 0.7)
                print(f"üîé –ü–æ—Ä–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {threshold}")
                print(f"üß™ prediction = {prediction}")
                print(f"üß™ threshold = {threshold}")


                if prediction['error_probability'] >= threshold:
                    await send_notification(chat_id, prediction)
                    print(f"‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

                    SENT_TEST = True

        await asyncio.sleep(10)

# -------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ --------------

def main():
    application = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        MAIN_MENU: [
            MessageHandler(filters.Regex('^(üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏|üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è|üìã –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç|üì´ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥|üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ–π—á–∞—Å)$'), main_menu_handler),
            MessageHandler(filters.Regex('^(üìÉ Excel-–æ—Ç—á–µ—Ç|üìÑ PDF-–æ—Ç—á–µ—Ç|üìä –û—Ç—á–µ—Ç –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º|üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é)$'), report_format_handler),
        ],


        CHOOSING_SETTING: [MessageHandler(filters.TEXT & ~filters.COMMAND, setting_choice_handler)],
        CHOOSING_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, threshold_chosen)],
        CHOOSING_INTERVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, interval_chosen)],
        CHOOSING_LOG_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_level_chosen)],
        CHOOSING_LOG_WINDOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_window_chosen)],
        CHOOSING_LOG_THRESHOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_threshold_chosen)],
        CHOOSING_LOG_INTERVAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, log_interval_chosen)],

    },
    fallbacks=[CommandHandler('start', start)],
)
    application.add_handler(conv_handler)


    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(polling_loop())
    application.run_polling()

if __name__ == "__main__":
    main()
